// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.3
// source: snapshot.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Bool represents a boolean which can either be unset, true or
// false. This quirk is necessary because proto3 does not distinguish
// the default value (false) from a field not being set, which would
// not allow us to do upgrades from older versions of RobustIRC to
// newer versions of RobustIRC which introduce a new boolean field.
type Bool int32

const (
	Bool_UNSET Bool = 0
	Bool_TRUE  Bool = 1
	Bool_FALSE Bool = 2
)

// Enum value maps for Bool.
var (
	Bool_name = map[int32]string{
		0: "UNSET",
		1: "TRUE",
		2: "FALSE",
	}
	Bool_value = map[string]int32{
		"UNSET": 0,
		"TRUE":  1,
		"FALSE": 2,
	}
)

func (x Bool) Enum() *Bool {
	p := new(Bool)
	*p = x
	return p
}

func (x Bool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bool) Descriptor() protoreflect.EnumDescriptor {
	return file_snapshot_proto_enumTypes[0].Descriptor()
}

func (Bool) Type() protoreflect.EnumType {
	return &file_snapshot_proto_enumTypes[0]
}

func (x Bool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bool.Descriptor instead.
func (Bool) EnumDescriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{0}
}

// Timestamp serializes a Go time.Time value with correct IsZero()
// semantics. Merely serializing the UnixNano() value is not
// sufficient, see https://play.golang.org/p/n3ZWGwZCKR
type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnixNano int64 `protobuf:"varint,1,opt,name=unix_nano,json=unixNano,proto3" json:"unix_nano,omitempty"`
	IsZero   bool  `protobuf:"varint,2,opt,name=is_zero,json=isZero,proto3" json:"is_zero,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *Timestamp) GetUnixNano() int64 {
	if x != nil {
		return x.UnixNano
	}
	return 0
}

func (x *Timestamp) GetIsZero() bool {
	if x != nil {
		return x.IsZero
	}
	return false
}

// Snapshot contains the entire state of an IRCServer object, so that
// a new IRCServer object can be created with exactly the same state.
type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions      []*Snapshot_Session          `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	Channels      []*Snapshot_Channel          `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	Svsholds      map[string]*Snapshot_SVSHold `protobuf:"bytes,3,rep,name=svsholds,proto3" json:"svsholds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastProcessed *RobustId                    `protobuf:"bytes,4,opt,name=last_processed,json=lastProcessed,proto3" json:"last_processed,omitempty"`
	Config        *Snapshot_Config             `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// last_included_index is the last ircstore message index which was
	// included when taking the snapshot. This is relevant to store this
	// snapshot in fsm.lastSnapshotState when restoring after ircstore
	// was deleted.
	LastIncludedIndex uint64 `protobuf:"varint,6,opt,name=last_included_index,json=lastIncludedIndex,proto3" json:"last_included_index,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *Snapshot) GetSessions() []*Snapshot_Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *Snapshot) GetChannels() []*Snapshot_Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Snapshot) GetSvsholds() map[string]*Snapshot_SVSHold {
	if x != nil {
		return x.Svsholds
	}
	return nil
}

func (x *Snapshot) GetLastProcessed() *RobustId {
	if x != nil {
		return x.LastProcessed
	}
	return nil
}

func (x *Snapshot) GetConfig() *Snapshot_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Snapshot) GetLastIncludedIndex() uint64 {
	if x != nil {
		return x.LastIncludedIndex
	}
	return 0
}

type Snapshot_IRCPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Snapshot_IRCPrefix) Reset() {
	*x = Snapshot_IRCPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_IRCPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_IRCPrefix) ProtoMessage() {}

func (x *Snapshot_IRCPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_IRCPrefix.ProtoReflect.Descriptor instead.
func (*Snapshot_IRCPrefix) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Snapshot_IRCPrefix) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snapshot_IRCPrefix) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Snapshot_IRCPrefix) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type Snapshot_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *RobustId           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Auth                string              `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Nick                string              `protobuf:"bytes,3,opt,name=nick,proto3" json:"nick,omitempty"`
	Username            string              `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Realname            string              `protobuf:"bytes,5,opt,name=realname,proto3" json:"realname,omitempty"`
	Channels            []string            `protobuf:"bytes,6,rep,name=channels,proto3" json:"channels,omitempty"`
	LastActivity        *Timestamp          `protobuf:"bytes,7,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`
	Operator            bool                `protobuf:"varint,8,opt,name=operator,proto3" json:"operator,omitempty"`
	AwayMsg             string              `protobuf:"bytes,9,opt,name=away_msg,json=awayMsg,proto3" json:"away_msg,omitempty"`
	Created             int64               `protobuf:"varint,22,opt,name=created,proto3" json:"created,omitempty"`
	ThrottlingExponent  int64               `protobuf:"varint,10,opt,name=throttling_exponent,json=throttlingExponent,proto3" json:"throttling_exponent,omitempty"`
	InvitedTo           []string            `protobuf:"bytes,11,rep,name=invited_to,json=invitedTo,proto3" json:"invited_to,omitempty"`
	Modes               []string            `protobuf:"bytes,12,rep,name=modes,proto3" json:"modes,omitempty"`
	Svid                string              `protobuf:"bytes,13,opt,name=svid,proto3" json:"svid,omitempty"`
	Pass                string              `protobuf:"bytes,14,opt,name=pass,proto3" json:"pass,omitempty"`
	Server              bool                `protobuf:"varint,15,opt,name=server,proto3" json:"server,omitempty"`
	LastClientMessageId uint64              `protobuf:"varint,17,opt,name=last_client_message_id,json=lastClientMessageId,proto3" json:"last_client_message_id,omitempty"`
	IrcPrefix           *Snapshot_IRCPrefix `protobuf:"bytes,18,opt,name=irc_prefix,json=ircPrefix,proto3" json:"irc_prefix,omitempty"`
	LastNonPing         *Timestamp          `protobuf:"bytes,19,opt,name=last_non_ping,json=lastNonPing,proto3" json:"last_non_ping,omitempty"`
	LastSolvedCaptcha   *Timestamp          `protobuf:"bytes,20,opt,name=last_solved_captcha,json=lastSolvedCaptcha,proto3" json:"last_solved_captcha,omitempty"`
	LoggedIn            Bool                `protobuf:"varint,21,opt,name=logged_in,json=loggedIn,proto3,enum=proto.Bool" json:"logged_in,omitempty"`
	RemoteAddr          string              `protobuf:"bytes,23,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
}

func (x *Snapshot_Session) Reset() {
	*x = Snapshot_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Session) ProtoMessage() {}

func (x *Snapshot_Session) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Session.ProtoReflect.Descriptor instead.
func (*Snapshot_Session) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Snapshot_Session) GetId() *RobustId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Snapshot_Session) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *Snapshot_Session) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *Snapshot_Session) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Snapshot_Session) GetRealname() string {
	if x != nil {
		return x.Realname
	}
	return ""
}

func (x *Snapshot_Session) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Snapshot_Session) GetLastActivity() *Timestamp {
	if x != nil {
		return x.LastActivity
	}
	return nil
}

func (x *Snapshot_Session) GetOperator() bool {
	if x != nil {
		return x.Operator
	}
	return false
}

func (x *Snapshot_Session) GetAwayMsg() string {
	if x != nil {
		return x.AwayMsg
	}
	return ""
}

func (x *Snapshot_Session) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Snapshot_Session) GetThrottlingExponent() int64 {
	if x != nil {
		return x.ThrottlingExponent
	}
	return 0
}

func (x *Snapshot_Session) GetInvitedTo() []string {
	if x != nil {
		return x.InvitedTo
	}
	return nil
}

func (x *Snapshot_Session) GetModes() []string {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *Snapshot_Session) GetSvid() string {
	if x != nil {
		return x.Svid
	}
	return ""
}

func (x *Snapshot_Session) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *Snapshot_Session) GetServer() bool {
	if x != nil {
		return x.Server
	}
	return false
}

func (x *Snapshot_Session) GetLastClientMessageId() uint64 {
	if x != nil {
		return x.LastClientMessageId
	}
	return 0
}

func (x *Snapshot_Session) GetIrcPrefix() *Snapshot_IRCPrefix {
	if x != nil {
		return x.IrcPrefix
	}
	return nil
}

func (x *Snapshot_Session) GetLastNonPing() *Timestamp {
	if x != nil {
		return x.LastNonPing
	}
	return nil
}

func (x *Snapshot_Session) GetLastSolvedCaptcha() *Timestamp {
	if x != nil {
		return x.LastSolvedCaptcha
	}
	return nil
}

func (x *Snapshot_Session) GetLoggedIn() Bool {
	if x != nil {
		return x.LoggedIn
	}
	return Bool_UNSET
}

func (x *Snapshot_Session) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

type Snapshot_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TopicNick string                             `protobuf:"bytes,2,opt,name=topic_nick,json=topicNick,proto3" json:"topic_nick,omitempty"`
	TopicTime *Timestamp                         `protobuf:"bytes,3,opt,name=topic_time,json=topicTime,proto3" json:"topic_time,omitempty"`
	Topic     string                             `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Nicks     map[string]*Snapshot_Channel_Modes `protobuf:"bytes,5,rep,name=nicks,proto3" json:"nicks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Modes     []string                           `protobuf:"bytes,6,rep,name=modes,proto3" json:"modes,omitempty"`
	Bans      []*Snapshot_Channel_BanPattern     `protobuf:"bytes,7,rep,name=bans,proto3" json:"bans,omitempty"`
	Key       string                             `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Snapshot_Channel) Reset() {
	*x = Snapshot_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Channel) ProtoMessage() {}

func (x *Snapshot_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Channel.ProtoReflect.Descriptor instead.
func (*Snapshot_Channel) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Snapshot_Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snapshot_Channel) GetTopicNick() string {
	if x != nil {
		return x.TopicNick
	}
	return ""
}

func (x *Snapshot_Channel) GetTopicTime() *Timestamp {
	if x != nil {
		return x.TopicTime
	}
	return nil
}

func (x *Snapshot_Channel) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Snapshot_Channel) GetNicks() map[string]*Snapshot_Channel_Modes {
	if x != nil {
		return x.Nicks
	}
	return nil
}

func (x *Snapshot_Channel) GetModes() []string {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *Snapshot_Channel) GetBans() []*Snapshot_Channel_BanPattern {
	if x != nil {
		return x.Bans
	}
	return nil
}

func (x *Snapshot_Channel) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Snapshot_SVSHold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Added    *Timestamp `protobuf:"bytes,1,opt,name=added,proto3" json:"added,omitempty"`
	Duration string     `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Reason   string     `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Snapshot_SVSHold) Reset() {
	*x = Snapshot_SVSHold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_SVSHold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_SVSHold) ProtoMessage() {}

func (x *Snapshot_SVSHold) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_SVSHold.ProtoReflect.Descriptor instead.
func (*Snapshot_SVSHold) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Snapshot_SVSHold) GetAdded() *Timestamp {
	if x != nil {
		return x.Added
	}
	return nil
}

func (x *Snapshot_SVSHold) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *Snapshot_SVSHold) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Snapshot_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision                uint64               `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Irc                     *Snapshot_Config_IRC `protobuf:"bytes,2,opt,name=irc,proto3" json:"irc,omitempty"`
	SessionExpiration       string               `protobuf:"bytes,3,opt,name=session_expiration,json=sessionExpiration,proto3" json:"session_expiration,omitempty"`
	PostMessageCooloff      string               `protobuf:"bytes,4,opt,name=post_message_cooloff,json=postMessageCooloff,proto3" json:"post_message_cooloff,omitempty"`
	TrustedBridges          map[string]string    `protobuf:"bytes,5,rep,name=trusted_bridges,json=trustedBridges,proto3" json:"trusted_bridges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CaptchaUrl              string               `protobuf:"bytes,6,opt,name=captcha_url,json=captchaUrl,proto3" json:"captcha_url,omitempty"`
	CaptchaHmacSecret       string               `protobuf:"bytes,7,opt,name=captcha_hmac_secret,json=captchaHmacSecret,proto3" json:"captcha_hmac_secret,omitempty"`
	CaptchaRequiredForLogin bool                 `protobuf:"varint,8,opt,name=captcha_required_for_login,json=captchaRequiredForLogin,proto3" json:"captcha_required_for_login,omitempty"`
	MaxSessions             uint64               `protobuf:"varint,9,opt,name=max_sessions,json=maxSessions,proto3" json:"max_sessions,omitempty"`
	MaxChannels             uint64               `protobuf:"varint,10,opt,name=max_channels,json=maxChannels,proto3" json:"max_channels,omitempty"`
	Banned                  map[string]string    `protobuf:"bytes,11,rep,name=banned,proto3" json:"banned,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Snapshot_Config) Reset() {
	*x = Snapshot_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Config) ProtoMessage() {}

func (x *Snapshot_Config) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Config.ProtoReflect.Descriptor instead.
func (*Snapshot_Config) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Snapshot_Config) GetRevision() uint64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *Snapshot_Config) GetIrc() *Snapshot_Config_IRC {
	if x != nil {
		return x.Irc
	}
	return nil
}

func (x *Snapshot_Config) GetSessionExpiration() string {
	if x != nil {
		return x.SessionExpiration
	}
	return ""
}

func (x *Snapshot_Config) GetPostMessageCooloff() string {
	if x != nil {
		return x.PostMessageCooloff
	}
	return ""
}

func (x *Snapshot_Config) GetTrustedBridges() map[string]string {
	if x != nil {
		return x.TrustedBridges
	}
	return nil
}

func (x *Snapshot_Config) GetCaptchaUrl() string {
	if x != nil {
		return x.CaptchaUrl
	}
	return ""
}

func (x *Snapshot_Config) GetCaptchaHmacSecret() string {
	if x != nil {
		return x.CaptchaHmacSecret
	}
	return ""
}

func (x *Snapshot_Config) GetCaptchaRequiredForLogin() bool {
	if x != nil {
		return x.CaptchaRequiredForLogin
	}
	return false
}

func (x *Snapshot_Config) GetMaxSessions() uint64 {
	if x != nil {
		return x.MaxSessions
	}
	return 0
}

func (x *Snapshot_Config) GetMaxChannels() uint64 {
	if x != nil {
		return x.MaxChannels
	}
	return 0
}

func (x *Snapshot_Config) GetBanned() map[string]string {
	if x != nil {
		return x.Banned
	}
	return nil
}

// Modes is a workaround because proto3 does not support
// map<string, repeated string>.
type Snapshot_Channel_Modes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode []string `protobuf:"bytes,1,rep,name=mode,proto3" json:"mode,omitempty"`
}

func (x *Snapshot_Channel_Modes) Reset() {
	*x = Snapshot_Channel_Modes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Channel_Modes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Channel_Modes) ProtoMessage() {}

func (x *Snapshot_Channel_Modes) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Channel_Modes.ProtoReflect.Descriptor instead.
func (*Snapshot_Channel_Modes) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *Snapshot_Channel_Modes) GetMode() []string {
	if x != nil {
		return x.Mode
	}
	return nil
}

type Snapshot_Channel_BanPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Regexp  string `protobuf:"bytes,2,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *Snapshot_Channel_BanPattern) Reset() {
	*x = Snapshot_Channel_BanPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Channel_BanPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Channel_BanPattern) ProtoMessage() {}

func (x *Snapshot_Channel_BanPattern) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Channel_BanPattern.ProtoReflect.Descriptor instead.
func (*Snapshot_Channel_BanPattern) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 2, 2}
}

func (x *Snapshot_Channel_BanPattern) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *Snapshot_Channel_BanPattern) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type Snapshot_Config_IRC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operators []*Snapshot_Config_IRC_Operator `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
	Services  []*Snapshot_Config_IRC_Service  `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *Snapshot_Config_IRC) Reset() {
	*x = Snapshot_Config_IRC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Config_IRC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Config_IRC) ProtoMessage() {}

func (x *Snapshot_Config_IRC) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Config_IRC.ProtoReflect.Descriptor instead.
func (*Snapshot_Config_IRC) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 5, 0}
}

func (x *Snapshot_Config_IRC) GetOperators() []*Snapshot_Config_IRC_Operator {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *Snapshot_Config_IRC) GetServices() []*Snapshot_Config_IRC_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

type Snapshot_Config_IRC_Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Snapshot_Config_IRC_Operator) Reset() {
	*x = Snapshot_Config_IRC_Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Config_IRC_Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Config_IRC_Operator) ProtoMessage() {}

func (x *Snapshot_Config_IRC_Operator) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Config_IRC_Operator.ProtoReflect.Descriptor instead.
func (*Snapshot_Config_IRC_Operator) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 5, 0, 0}
}

func (x *Snapshot_Config_IRC_Operator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snapshot_Config_IRC_Operator) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Snapshot_Config_IRC_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Snapshot_Config_IRC_Service) Reset() {
	*x = Snapshot_Config_IRC_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot_Config_IRC_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot_Config_IRC_Service) ProtoMessage() {}

func (x *Snapshot_Config_IRC_Service) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot_Config_IRC_Service.ProtoReflect.Descriptor instead.
func (*Snapshot_Config_IRC_Service) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 5, 0, 1}
}

func (x *Snapshot_Config_IRC_Service) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_snapshot_proto protoreflect.FileDescriptor

var file_snapshot_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x22, 0xb9, 0x15, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x39,
	0x0a, 0x08, 0x73, 0x76, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x53, 0x76, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x73, 0x76, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x62, 0x75, 0x73, 0x74,
	0x49, 0x64, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x1a, 0x47, 0x0a, 0x09, 0x49, 0x52, 0x43, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x1a, 0x8c, 0x06, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x62, 0x75, 0x73,
	0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x77, 0x61, 0x79, 0x4d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x76, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x72, 0x63, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x49, 0x52, 0x43, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x09, 0x69, 0x72, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x34, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x28, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x1a, 0xd3, 0x03, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x38, 0x0a, 0x05, 0x6e, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4e, 0x69, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x6e, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x42, 0x61, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x1b, 0x0a, 0x05, 0x4d, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x57, 0x0a, 0x0a, 0x4e, 0x69, 0x63, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x1a,
	0x65, 0x0a, 0x07, 0x53, 0x56, 0x53, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x54, 0x0a, 0x0d, 0x53, 0x76, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53, 0x56, 0x53, 0x48, 0x6f, 0x6c,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x84, 0x07, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x69, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x52, 0x43, 0x52, 0x03, 0x69, 0x72,
	0x63, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x6f, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x6f,
	0x66, 0x66, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x5f, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x48, 0x6d,
	0x61, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x1a, 0xeb, 0x01, 0x0a, 0x03, 0x49, 0x52, 0x43, 0x12,
	0x41, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x52, 0x43, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x52, 0x43,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x25,
	0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0x26, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x42, 0x2f, 0x5a, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6f, 0x62, 0x75, 0x73, 0x74,
	0x69, 0x72, 0x63, 0x2f, 0x72, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x69, 0x72, 0x63, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snapshot_proto_rawDescOnce sync.Once
	file_snapshot_proto_rawDescData = file_snapshot_proto_rawDesc
)

func file_snapshot_proto_rawDescGZIP() []byte {
	file_snapshot_proto_rawDescOnce.Do(func() {
		file_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_snapshot_proto_rawDescData)
	})
	return file_snapshot_proto_rawDescData
}

var file_snapshot_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_snapshot_proto_goTypes = []interface{}{
	(Bool)(0),                            // 0: proto.Bool
	(*Timestamp)(nil),                    // 1: proto.Timestamp
	(*Snapshot)(nil),                     // 2: proto.Snapshot
	(*Snapshot_IRCPrefix)(nil),           // 3: proto.Snapshot.IRCPrefix
	(*Snapshot_Session)(nil),             // 4: proto.Snapshot.Session
	(*Snapshot_Channel)(nil),             // 5: proto.Snapshot.Channel
	(*Snapshot_SVSHold)(nil),             // 6: proto.Snapshot.SVSHold
	nil,                                  // 7: proto.Snapshot.SvsholdsEntry
	(*Snapshot_Config)(nil),              // 8: proto.Snapshot.Config
	(*Snapshot_Channel_Modes)(nil),       // 9: proto.Snapshot.Channel.Modes
	nil,                                  // 10: proto.Snapshot.Channel.NicksEntry
	(*Snapshot_Channel_BanPattern)(nil),  // 11: proto.Snapshot.Channel.BanPattern
	(*Snapshot_Config_IRC)(nil),          // 12: proto.Snapshot.Config.IRC
	nil,                                  // 13: proto.Snapshot.Config.TrustedBridgesEntry
	nil,                                  // 14: proto.Snapshot.Config.BannedEntry
	(*Snapshot_Config_IRC_Operator)(nil), // 15: proto.Snapshot.Config.IRC.Operator
	(*Snapshot_Config_IRC_Service)(nil),  // 16: proto.Snapshot.Config.IRC.Service
	(*RobustId)(nil),                     // 17: proto.RobustId
}
var file_snapshot_proto_depIdxs = []int32{
	4,  // 0: proto.Snapshot.sessions:type_name -> proto.Snapshot.Session
	5,  // 1: proto.Snapshot.channels:type_name -> proto.Snapshot.Channel
	7,  // 2: proto.Snapshot.svsholds:type_name -> proto.Snapshot.SvsholdsEntry
	17, // 3: proto.Snapshot.last_processed:type_name -> proto.RobustId
	8,  // 4: proto.Snapshot.config:type_name -> proto.Snapshot.Config
	17, // 5: proto.Snapshot.Session.id:type_name -> proto.RobustId
	1,  // 6: proto.Snapshot.Session.last_activity:type_name -> proto.Timestamp
	3,  // 7: proto.Snapshot.Session.irc_prefix:type_name -> proto.Snapshot.IRCPrefix
	1,  // 8: proto.Snapshot.Session.last_non_ping:type_name -> proto.Timestamp
	1,  // 9: proto.Snapshot.Session.last_solved_captcha:type_name -> proto.Timestamp
	0,  // 10: proto.Snapshot.Session.logged_in:type_name -> proto.Bool
	1,  // 11: proto.Snapshot.Channel.topic_time:type_name -> proto.Timestamp
	10, // 12: proto.Snapshot.Channel.nicks:type_name -> proto.Snapshot.Channel.NicksEntry
	11, // 13: proto.Snapshot.Channel.bans:type_name -> proto.Snapshot.Channel.BanPattern
	1,  // 14: proto.Snapshot.SVSHold.added:type_name -> proto.Timestamp
	6,  // 15: proto.Snapshot.SvsholdsEntry.value:type_name -> proto.Snapshot.SVSHold
	12, // 16: proto.Snapshot.Config.irc:type_name -> proto.Snapshot.Config.IRC
	13, // 17: proto.Snapshot.Config.trusted_bridges:type_name -> proto.Snapshot.Config.TrustedBridgesEntry
	14, // 18: proto.Snapshot.Config.banned:type_name -> proto.Snapshot.Config.BannedEntry
	9,  // 19: proto.Snapshot.Channel.NicksEntry.value:type_name -> proto.Snapshot.Channel.Modes
	15, // 20: proto.Snapshot.Config.IRC.operators:type_name -> proto.Snapshot.Config.IRC.Operator
	16, // 21: proto.Snapshot.Config.IRC.services:type_name -> proto.Snapshot.Config.IRC.Service
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_snapshot_proto_init() }
func file_snapshot_proto_init() {
	if File_snapshot_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_IRCPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_SVSHold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Channel_Modes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Channel_BanPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Config_IRC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Config_IRC_Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot_Config_IRC_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snapshot_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snapshot_proto_goTypes,
		DependencyIndexes: file_snapshot_proto_depIdxs,
		EnumInfos:         file_snapshot_proto_enumTypes,
		MessageInfos:      file_snapshot_proto_msgTypes,
	}.Build()
	File_snapshot_proto = out.File
	file_snapshot_proto_rawDesc = nil
	file_snapshot_proto_goTypes = nil
	file_snapshot_proto_depIdxs = nil
}
