// Code generated by protoc-gen-go.
// source: snapshot.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Timestamp serializes a Go time.Time value with correct IsZero()
// semantics. Merely serializing the UnixNano() value is not
// sufficient, see https://play.golang.org/p/n3ZWGwZCKR
type Timestamp struct {
	UnixNano int64 `protobuf:"varint,1,opt,name=unix_nano,json=unixNano" json:"unix_nano,omitempty"`
	IsZero   bool  `protobuf:"varint,2,opt,name=is_zero,json=isZero" json:"is_zero,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto1.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Snapshot contains the entire state of an IRCServer object, so that
// a new IRCServer object can be created with exactly the same state.
type Snapshot struct {
	Sessions      []*Snapshot_Session          `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
	Channels      []*Snapshot_Channel          `protobuf:"bytes,2,rep,name=channels" json:"channels,omitempty"`
	Svsholds      map[string]*Snapshot_SVSHold `protobuf:"bytes,3,rep,name=svsholds" json:"svsholds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastProcessed *RobustId                    `protobuf:"bytes,4,opt,name=last_processed,json=lastProcessed" json:"last_processed,omitempty"`
	Config        *Snapshot_Config             `protobuf:"bytes,5,opt,name=config" json:"config,omitempty"`
	// last_included_index is the last ircstore message index which was
	// included when taking the snapshot. This is relevant to store this
	// snapshot in fsm.lastSnapshotState when restoring after ircstore
	// was deleted.
	LastIncludedIndex uint64 `protobuf:"varint,6,opt,name=last_included_index,json=lastIncludedIndex" json:"last_included_index,omitempty"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto1.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Snapshot) GetSessions() []*Snapshot_Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *Snapshot) GetChannels() []*Snapshot_Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *Snapshot) GetSvsholds() map[string]*Snapshot_SVSHold {
	if m != nil {
		return m.Svsholds
	}
	return nil
}

func (m *Snapshot) GetLastProcessed() *RobustId {
	if m != nil {
		return m.LastProcessed
	}
	return nil
}

func (m *Snapshot) GetConfig() *Snapshot_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

type Snapshot_IRCPrefix struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	User string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Host string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
}

func (m *Snapshot_IRCPrefix) Reset()                    { *m = Snapshot_IRCPrefix{} }
func (m *Snapshot_IRCPrefix) String() string            { return proto1.CompactTextString(m) }
func (*Snapshot_IRCPrefix) ProtoMessage()               {}
func (*Snapshot_IRCPrefix) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type Snapshot_Session struct {
	Id                  *RobustId           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Auth                string              `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
	Nick                string              `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Username            string              `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	Realname            string              `protobuf:"bytes,5,opt,name=realname" json:"realname,omitempty"`
	Channels            []string            `protobuf:"bytes,6,rep,name=channels" json:"channels,omitempty"`
	LastActivity        *Timestamp          `protobuf:"bytes,7,opt,name=last_activity,json=lastActivity" json:"last_activity,omitempty"`
	Operator            bool                `protobuf:"varint,8,opt,name=operator" json:"operator,omitempty"`
	AwayMsg             string              `protobuf:"bytes,9,opt,name=away_msg,json=awayMsg" json:"away_msg,omitempty"`
	ThrottlingExponent  int64               `protobuf:"varint,10,opt,name=throttling_exponent,json=throttlingExponent" json:"throttling_exponent,omitempty"`
	InvitedTo           []string            `protobuf:"bytes,11,rep,name=invited_to,json=invitedTo" json:"invited_to,omitempty"`
	Modes               []string            `protobuf:"bytes,12,rep,name=modes" json:"modes,omitempty"`
	Svid                string              `protobuf:"bytes,13,opt,name=svid" json:"svid,omitempty"`
	Pass                string              `protobuf:"bytes,14,opt,name=pass" json:"pass,omitempty"`
	Server              bool                `protobuf:"varint,15,opt,name=server" json:"server,omitempty"`
	StartId             *RobustId           `protobuf:"bytes,16,opt,name=start_id,json=startId" json:"start_id,omitempty"`
	LastClientMessageId uint64              `protobuf:"varint,17,opt,name=last_client_message_id,json=lastClientMessageId" json:"last_client_message_id,omitempty"`
	IrcPrefix           *Snapshot_IRCPrefix `protobuf:"bytes,18,opt,name=irc_prefix,json=ircPrefix" json:"irc_prefix,omitempty"`
	LastNonPing         *Timestamp          `protobuf:"bytes,19,opt,name=last_non_ping,json=lastNonPing" json:"last_non_ping,omitempty"`
}

func (m *Snapshot_Session) Reset()                    { *m = Snapshot_Session{} }
func (m *Snapshot_Session) String() string            { return proto1.CompactTextString(m) }
func (*Snapshot_Session) ProtoMessage()               {}
func (*Snapshot_Session) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 1} }

func (m *Snapshot_Session) GetId() *RobustId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Snapshot_Session) GetLastActivity() *Timestamp {
	if m != nil {
		return m.LastActivity
	}
	return nil
}

func (m *Snapshot_Session) GetStartId() *RobustId {
	if m != nil {
		return m.StartId
	}
	return nil
}

func (m *Snapshot_Session) GetIrcPrefix() *Snapshot_IRCPrefix {
	if m != nil {
		return m.IrcPrefix
	}
	return nil
}

func (m *Snapshot_Session) GetLastNonPing() *Timestamp {
	if m != nil {
		return m.LastNonPing
	}
	return nil
}

type Snapshot_Channel struct {
	Name      string                             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	TopicNick string                             `protobuf:"bytes,2,opt,name=topic_nick,json=topicNick" json:"topic_nick,omitempty"`
	TopicTime *Timestamp                         `protobuf:"bytes,3,opt,name=topic_time,json=topicTime" json:"topic_time,omitempty"`
	Topic     string                             `protobuf:"bytes,4,opt,name=topic" json:"topic,omitempty"`
	Nicks     map[string]*Snapshot_Channel_Modes `protobuf:"bytes,5,rep,name=nicks" json:"nicks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Modes     []string                           `protobuf:"bytes,6,rep,name=modes" json:"modes,omitempty"`
}

func (m *Snapshot_Channel) Reset()                    { *m = Snapshot_Channel{} }
func (m *Snapshot_Channel) String() string            { return proto1.CompactTextString(m) }
func (*Snapshot_Channel) ProtoMessage()               {}
func (*Snapshot_Channel) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 2} }

func (m *Snapshot_Channel) GetTopicTime() *Timestamp {
	if m != nil {
		return m.TopicTime
	}
	return nil
}

func (m *Snapshot_Channel) GetNicks() map[string]*Snapshot_Channel_Modes {
	if m != nil {
		return m.Nicks
	}
	return nil
}

// Modes is a workaround because proto3 does not support
// map<string, repeated string>.
type Snapshot_Channel_Modes struct {
	Mode []string `protobuf:"bytes,1,rep,name=mode" json:"mode,omitempty"`
}

func (m *Snapshot_Channel_Modes) Reset()                    { *m = Snapshot_Channel_Modes{} }
func (m *Snapshot_Channel_Modes) String() string            { return proto1.CompactTextString(m) }
func (*Snapshot_Channel_Modes) ProtoMessage()               {}
func (*Snapshot_Channel_Modes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 2, 0} }

type Snapshot_SVSHold struct {
	Added    *Timestamp `protobuf:"bytes,1,opt,name=added" json:"added,omitempty"`
	Duration string     `protobuf:"bytes,2,opt,name=duration" json:"duration,omitempty"`
	Reason   string     `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *Snapshot_SVSHold) Reset()                    { *m = Snapshot_SVSHold{} }
func (m *Snapshot_SVSHold) String() string            { return proto1.CompactTextString(m) }
func (*Snapshot_SVSHold) ProtoMessage()               {}
func (*Snapshot_SVSHold) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 3} }

func (m *Snapshot_SVSHold) GetAdded() *Timestamp {
	if m != nil {
		return m.Added
	}
	return nil
}

type Snapshot_Config struct {
	Revision           uint64               `protobuf:"varint,1,opt,name=revision" json:"revision,omitempty"`
	Irc                *Snapshot_Config_IRC `protobuf:"bytes,2,opt,name=irc" json:"irc,omitempty"`
	SessionExpiration  string               `protobuf:"bytes,3,opt,name=session_expiration,json=sessionExpiration" json:"session_expiration,omitempty"`
	PostMessageCooloff string               `protobuf:"bytes,4,opt,name=post_message_cooloff,json=postMessageCooloff" json:"post_message_cooloff,omitempty"`
}

func (m *Snapshot_Config) Reset()                    { *m = Snapshot_Config{} }
func (m *Snapshot_Config) String() string            { return proto1.CompactTextString(m) }
func (*Snapshot_Config) ProtoMessage()               {}
func (*Snapshot_Config) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 5} }

func (m *Snapshot_Config) GetIrc() *Snapshot_Config_IRC {
	if m != nil {
		return m.Irc
	}
	return nil
}

type Snapshot_Config_IRC struct {
	Operators []*Snapshot_Config_IRC_Operator `protobuf:"bytes,1,rep,name=operators" json:"operators,omitempty"`
	Services  []*Snapshot_Config_IRC_Service  `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *Snapshot_Config_IRC) Reset()                    { *m = Snapshot_Config_IRC{} }
func (m *Snapshot_Config_IRC) String() string            { return proto1.CompactTextString(m) }
func (*Snapshot_Config_IRC) ProtoMessage()               {}
func (*Snapshot_Config_IRC) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 5, 0} }

func (m *Snapshot_Config_IRC) GetOperators() []*Snapshot_Config_IRC_Operator {
	if m != nil {
		return m.Operators
	}
	return nil
}

func (m *Snapshot_Config_IRC) GetServices() []*Snapshot_Config_IRC_Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Snapshot_Config_IRC_Operator struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *Snapshot_Config_IRC_Operator) Reset()         { *m = Snapshot_Config_IRC_Operator{} }
func (m *Snapshot_Config_IRC_Operator) String() string { return proto1.CompactTextString(m) }
func (*Snapshot_Config_IRC_Operator) ProtoMessage()    {}
func (*Snapshot_Config_IRC_Operator) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 5, 0, 0}
}

type Snapshot_Config_IRC_Service struct {
	Password string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
}

func (m *Snapshot_Config_IRC_Service) Reset()         { *m = Snapshot_Config_IRC_Service{} }
func (m *Snapshot_Config_IRC_Service) String() string { return proto1.CompactTextString(m) }
func (*Snapshot_Config_IRC_Service) ProtoMessage()    {}
func (*Snapshot_Config_IRC_Service) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 5, 0, 1}
}

func init() {
	proto1.RegisterType((*Timestamp)(nil), "proto.Timestamp")
	proto1.RegisterType((*Snapshot)(nil), "proto.Snapshot")
	proto1.RegisterType((*Snapshot_IRCPrefix)(nil), "proto.Snapshot.IRCPrefix")
	proto1.RegisterType((*Snapshot_Session)(nil), "proto.Snapshot.Session")
	proto1.RegisterType((*Snapshot_Channel)(nil), "proto.Snapshot.Channel")
	proto1.RegisterType((*Snapshot_Channel_Modes)(nil), "proto.Snapshot.Channel.Modes")
	proto1.RegisterType((*Snapshot_SVSHold)(nil), "proto.Snapshot.SVSHold")
	proto1.RegisterType((*Snapshot_Config)(nil), "proto.Snapshot.Config")
	proto1.RegisterType((*Snapshot_Config_IRC)(nil), "proto.Snapshot.Config.IRC")
	proto1.RegisterType((*Snapshot_Config_IRC_Operator)(nil), "proto.Snapshot.Config.IRC.Operator")
	proto1.RegisterType((*Snapshot_Config_IRC_Service)(nil), "proto.Snapshot.Config.IRC.Service")
}

func init() { proto1.RegisterFile("snapshot.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 966 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x55, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0xd6, 0x66, 0xd7, 0xfb, 0x33, 0xdb, 0xfc, 0x4d, 0xaa, 0xd4, 0x75, 0x55, 0x81, 0x82, 0x40,
	0x15, 0x82, 0x2d, 0x6a, 0x01, 0x95, 0x5e, 0x20, 0x55, 0x51, 0x04, 0x7b, 0x91, 0x10, 0x39, 0x11,
	0x48, 0xdc, 0x58, 0xae, 0x3d, 0xd9, 0x1d, 0xd5, 0x3b, 0x63, 0x79, 0x66, 0x37, 0x59, 0x5e, 0x81,
	0xa7, 0xe0, 0x71, 0x10, 0x8f, 0xc2, 0x4b, 0x70, 0xce, 0x99, 0xb1, 0x93, 0xb0, 0x4e, 0xaf, 0x3c,
	0x67, 0xbe, 0x33, 0xe7, 0xf7, 0x3b, 0xc7, 0x6c, 0xc7, 0xa8, 0xb4, 0x34, 0x73, 0x6d, 0x27, 0x65,
	0xa5, 0xad, 0xe6, 0x01, 0x7d, 0xa2, 0xb1, 0x5d, 0x97, 0xc2, 0xb8, 0xbb, 0xa3, 0x77, 0x6c, 0x74,
	0x29, 0x17, 0xc2, 0xd8, 0x74, 0x51, 0xf2, 0x67, 0x6c, 0xb4, 0x54, 0xf2, 0x26, 0x51, 0xa9, 0xd2,
	0x61, 0xe7, 0xd3, 0xce, 0x8b, 0x6e, 0x3c, 0xc4, 0x8b, 0x33, 0x90, 0xf9, 0x13, 0x36, 0x90, 0x26,
	0xf9, 0x43, 0x54, 0x3a, 0xdc, 0x02, 0x68, 0x18, 0xf7, 0xa5, 0xf9, 0x1d, 0xa4, 0xa3, 0x7f, 0x76,
	0xd9, 0xf0, 0xc2, 0x7b, 0xe2, 0xaf, 0xd9, 0xd0, 0x08, 0x63, 0xa4, 0x56, 0x06, 0x2c, 0x74, 0x5f,
	0x8c, 0x5f, 0x3d, 0x71, 0x9e, 0x26, 0xb5, 0xca, 0xe4, 0xc2, 0xe1, 0x71, 0xa3, 0x88, 0x8f, 0xb2,
	0x79, 0xaa, 0x94, 0x28, 0x0c, 0xd8, 0x6e, 0x7d, 0x74, 0xec, 0xf0, 0xb8, 0x51, 0xe4, 0x3f, 0x80,
	0xa7, 0x15, 0x60, 0x45, 0x6e, 0xc2, 0x2e, 0x3d, 0x7a, 0xbe, 0xe1, 0xc9, 0xe3, 0x27, 0xca, 0x56,
	0xeb, 0xb8, 0x51, 0xe7, 0xdf, 0xb3, 0x9d, 0x22, 0x35, 0x36, 0x01, 0xf5, 0x0c, 0x62, 0x10, 0x79,
	0xd8, 0x83, 0x8c, 0xc6, 0xaf, 0x76, 0xbd, 0x81, 0x58, 0xbf, 0x5f, 0x1a, 0x3b, 0xcd, 0xe3, 0x6d,
	0x54, 0x3b, 0xaf, 0xb5, 0xf8, 0x84, 0xf5, 0x33, 0xad, 0xae, 0xe4, 0x2c, 0x0c, 0x48, 0xff, 0x70,
	0x23, 0x4a, 0x42, 0x63, 0xaf, 0x05, 0xfa, 0x07, 0xe4, 0x47, 0xaa, 0xac, 0x58, 0xe6, 0x22, 0x87,
	0x43, 0x2e, 0x6e, 0xc2, 0x3e, 0x3c, 0xee, 0xc5, 0xfb, 0x08, 0x4d, 0x3d, 0x32, 0x45, 0x20, 0xfa,
	0x89, 0x8d, 0xa6, 0xf1, 0xf1, 0x79, 0x25, 0xae, 0xe4, 0x0d, 0xe7, 0xac, 0xa7, 0xd2, 0x85, 0xa0,
	0x3e, 0x8c, 0x62, 0x3a, 0xe3, 0xdd, 0xd2, 0x88, 0x8a, 0x1a, 0x00, 0x77, 0x78, 0xc6, 0xbb, 0xb9,
	0x36, 0x16, 0x6a, 0x40, 0x77, 0x78, 0x8e, 0xfe, 0x0c, 0xd8, 0xc0, 0x97, 0x99, 0x7f, 0xc2, 0xb6,
	0x64, 0x4e, 0x56, 0x5a, 0x12, 0x04, 0x08, 0x0d, 0xa4, 0x4b, 0x3b, 0xaf, 0x8d, 0xe2, 0x99, 0x9c,
	0xcb, 0xec, 0x43, 0x6d, 0x14, 0xcf, 0x3c, 0x62, 0x43, 0x74, 0x48, 0x41, 0xf5, 0xe8, 0xbe, 0x91,
	0x11, 0xab, 0x44, 0x5a, 0x10, 0x16, 0x38, 0xac, 0x96, 0x11, 0x6b, 0xba, 0xdb, 0x87, 0x46, 0x8d,
	0xee, 0x34, 0xf1, 0x3b, 0x46, 0x25, 0x4e, 0xd2, 0xcc, 0xca, 0x95, 0xb4, 0xeb, 0x70, 0x40, 0x71,
	0xee, 0xf9, 0x38, 0x1b, 0x6a, 0xc6, 0x8f, 0x50, 0xed, 0x9d, 0xd7, 0x42, 0x93, 0xba, 0x14, 0x55,
	0x6a, 0x75, 0x15, 0x0e, 0x89, 0x8c, 0x8d, 0xcc, 0x9f, 0xb2, 0x61, 0x7a, 0x9d, 0xae, 0x93, 0x85,
	0x99, 0x85, 0x23, 0x0a, 0x65, 0x80, 0xf2, 0xa9, 0x99, 0xf1, 0x97, 0xec, 0xc0, 0xce, 0xc1, 0xb0,
	0x2d, 0xa4, 0x9a, 0x25, 0xe2, 0xa6, 0xd4, 0x4a, 0x28, 0x1b, 0x32, 0x62, 0x3a, 0xbf, 0x85, 0x4e,
	0x3c, 0xc2, 0x9f, 0x33, 0x26, 0x15, 0x78, 0x84, 0xd6, 0x59, 0x1d, 0x8e, 0x29, 0xf8, 0x91, 0xbf,
	0xb9, 0xd4, 0xfc, 0x31, 0x0b, 0x16, 0x3a, 0x17, 0x26, 0x7c, 0x44, 0x88, 0x13, 0xb0, 0x76, 0x66,
	0x05, 0x25, 0xdf, 0x76, 0xb5, 0xc3, 0x33, 0xde, 0x95, 0xa9, 0x31, 0xe1, 0x8e, 0xbb, 0xc3, 0x33,
	0x3f, 0x64, 0x7d, 0x28, 0xdf, 0x0a, 0xda, 0xb9, 0xeb, 0xe6, 0xc9, 0x49, 0xfc, 0x4b, 0x20, 0xb6,
	0x4d, 0x2b, 0xa0, 0x4d, 0x1e, 0xee, 0xb5, 0xb7, 0x6d, 0x40, 0x0a, 0xd3, 0x1c, 0x26, 0xe7, 0x90,
	0xea, 0x97, 0x15, 0x12, 0xe2, 0x4d, 0xa0, 0x5a, 0x26, 0x9d, 0x09, 0x7c, 0xb9, 0x4f, 0x24, 0x23,
	0xfe, 0x1d, 0x13, 0x78, 0xea, 0x30, 0x78, 0xf4, 0x06, 0xb2, 0xaa, 0x32, 0x60, 0x3f, 0xf2, 0x2c,
	0xe4, 0xe4, 0xe2, 0xe9, 0xff, 0xa9, 0xdc, 0x10, 0x11, 0x12, 0xae, 0x32, 0xcf, 0xc9, 0x6f, 0x7d,
	0xbb, 0x94, 0x56, 0x49, 0x09, 0x85, 0x0a, 0x0f, 0x1e, 0x68, 0xd7, 0x18, 0xd5, 0xce, 0xb4, 0x3a,
	0x07, 0xa5, 0xe8, 0xef, 0x2d, 0x36, 0xf0, 0xf3, 0xdb, 0xca, 0x6a, 0xa8, 0xb2, 0xd5, 0xa5, 0xcc,
	0x12, 0xa2, 0x9c, 0xa3, 0xe1, 0x88, 0x6e, 0xce, 0x90, 0x77, 0x2f, 0x6b, 0xd8, 0x82, 0x79, 0x62,
	0x64, 0x9b, 0x47, 0xf7, 0x00, 0x65, 0x6c, 0x0b, 0x09, 0x9e, 0xa5, 0x4e, 0x80, 0xac, 0x03, 0xb4,
	0x6f, 0x80, 0x9f, 0xb8, 0x2c, 0x8e, 0x1e, 0xd8, 0x30, 0x13, 0xf4, 0xe9, 0x37, 0x86, 0x7b, 0x70,
	0xdb, 0xe6, 0xfe, 0x9d, 0x36, 0x47, 0xcf, 0x58, 0x70, 0x5a, 0xf7, 0x1b, 0x6f, 0x68, 0xdd, 0x41,
	0x4a, 0x78, 0x8e, 0x7e, 0x63, 0xec, 0xd6, 0x0e, 0xdf, 0x63, 0xdd, 0x0f, 0x62, 0xed, 0x73, 0xc6,
	0x23, 0xf4, 0x2d, 0x58, 0xa5, 0xc5, 0x52, 0x50, 0xb6, 0x2d, 0x9b, 0xab, 0x0e, 0x86, 0x3c, 0xc4,
	0x4e, 0xf7, 0xed, 0xd6, 0x9b, 0x4e, 0x24, 0x60, 0xb0, 0x7f, 0xbd, 0xf8, 0x19, 0xd6, 0x18, 0xff,
	0x82, 0x05, 0x69, 0x0e, 0xbb, 0xc3, 0xcf, 0xf6, 0x66, 0x49, 0x1c, 0x8c, 0xc3, 0x92, 0x2f, 0x61,
	0x36, 0x60, 0x19, 0xf8, 0xe2, 0x36, 0x32, 0x72, 0x10, 0xe6, 0xd4, 0x00, 0xe2, 0x26, 0xdd, 0x4b,
	0xd1, 0x25, 0xdb, 0xbe, 0xb7, 0x3c, 0x5b, 0x52, 0xf8, 0xfa, 0x7e, 0x0a, 0x9b, 0x6b, 0xde, 0x85,
	0x79, 0x37, 0xf8, 0xbf, 0xba, 0xac, 0xef, 0x56, 0xa4, 0x5b, 0x18, 0x2b, 0x89, 0x1b, 0x8a, 0x8c,
	0xf6, 0xe2, 0x46, 0xe6, 0x5f, 0xb1, 0x2e, 0x50, 0xce, 0xdb, 0x8d, 0xda, 0x77, 0x2c, 0xf2, 0x33,
	0x46, 0x35, 0x88, 0x83, 0xfb, 0x1f, 0x09, 0x4e, 0xb4, 0xf4, 0x89, 0xba, 0x74, 0xf6, 0x3d, 0x72,
	0xd2, 0x00, 0xfc, 0x1b, 0xf6, 0xb8, 0x84, 0x15, 0xd9, 0x8c, 0x4a, 0xa6, 0x75, 0xa1, 0xaf, 0xae,
	0x3c, 0x57, 0x38, 0x62, 0x7e, 0x52, 0x8e, 0x1d, 0x12, 0xfd, 0xdb, 0x61, 0x5d, 0xf0, 0xc6, 0xe1,
	0x57, 0x59, 0x2f, 0x99, 0xfa, 0xdf, 0xf6, 0xd9, 0xc3, 0xc1, 0x4d, 0x7e, 0xf1, 0xba, 0xf1, 0xed,
	0x2b, 0xfe, 0x23, 0xfe, 0x1d, 0xab, 0x95, 0x84, 0xff, 0x89, 0xff, 0xd1, 0x1d, 0x7d, 0xc4, 0xc2,
	0x85, 0x53, 0x8d, 0x9b, 0x37, 0xd1, 0x5b, 0x36, 0xac, 0xcd, 0xb6, 0x4e, 0x12, 0x54, 0x15, 0x57,
	0xcb, 0xb5, 0xae, 0xf2, 0xba, 0xd5, 0xb5, 0x1c, 0x7d, 0x8e, 0xbf, 0x04, 0xb2, 0x73, 0x4f, 0xad,
	0x73, 0x5f, 0xed, 0x7d, 0x9f, 0xe2, 0x79, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x0e,
	0xc1, 0x7a, 0x3d, 0x08, 0x00, 0x00,
}
